generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  address        String?
  fatherName     String?
  motherName     String?
  citizenshipNo  String   @unique
  issueDate      DateTime?
  dob            DateTime?       
  panNumber      String?  @unique
  panIssueDate   DateTime? 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  is_active      Boolean   @default(false)
  salary         Float?   // User's salary, editable and nullable

  // Relation to OTP
  otps           otp[]    @relation("UserOtps")
  notifications  Notification[]
  payments       Payment[] // Payments made by the user

  @@map("users")
}

model otp {
  id         String   @id @default(uuid())
  code       String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  
  // Relation to User
  user       User     @relation("UserOtps", fields: [userId], references: [id])
  userId     String

  @@index([userId])
  @@map("otps")
}

model Admin {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  permanentOtp String  // The manually added OTP (store as string)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  paymentsVerified Payment[] @relation("AdminVerifiedPayments")

  @@map("admins")
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  message     String
  isRead      Boolean  @default(false) 
  isDeleted   Boolean  @default(false) 
  createdAt   DateTime @default(now())

  // Relation to User
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@map("notifications")
}

model Payment {
  id              String   @id @default(uuid())
  amount          Float    // Payable amount, calculated from user's salary
  esewaRefId      String   // eSewa transaction reference ID
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime @default(now())
  verifiedAt      DateTime?

  // Relations
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  verifiedBy      Admin?   @relation("AdminVerifiedPayments", fields: [adminId], references: [id])
  adminId         String?

  @@index([userId])
  @@index([adminId])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
}

